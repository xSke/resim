import os
from csv import DictWriter
from data import calculate_vibes


class SaveCsv:
    def __init__(self, run_name: str, category_name: str):
        self.final_filename = f"roll_data/{run_name}-{category_name}.csv"
        self.partial_filename = f"{self.final_filename}.partial"
        self.file = open(self.partial_filename, "w", newline="", encoding="utf-8")
        # Created when first row is written
        self.csv = None

    def write(
        self,
        event_type: str,
        roll: float,
        passed: bool,
        batter,
        batting_team,
        pitcher,
        pitching_team,
        stadium,
        update,
        what1: float,
        what2: float,
        batter_multiplier: float,
        pitcher_multiplier: float,
        is_strike: bool,
        strike_roll: float,
        strike_threshold: float,
        fielder_roll,
        fielder,
        fielder_multiplier,
        runner_on_first,
        runner_on_first_multiplier,
        runner_on_second,
        runner_on_second_multiplier,
        runner_on_third,
        runner_on_third_multiplier,
        runner_on_third_hh,
        runner_on_third_hh_multiplier,
        baserunners_next,
        attacked_team,
    ):
        # fmt: off
        row = {
            "event_type": event_type,
            "roll": roll,
            "passed": passed,
            "batter_buoyancy": batter.data["buoyancy"],
            "batter_divinity": batter.data["divinity"],
            "batter_martyrdom": batter.data["martyrdom"],
            "batter_moxie": batter.data["moxie"],
            "batter_musclitude": batter.data["musclitude"],
            "batter_patheticism": batter.data["patheticism"],
            "batter_thwackability": batter.data["thwackability"],
            "batter_tragicness": batter.data["tragicness"],
            "batter_coldness": batter.data["coldness"],
            "batter_overpowerment": batter.data["overpowerment"],
            "batter_ruthlessness": batter.data["ruthlessness"],
            "batter_shakespearianism": batter.data["shakespearianism"],
            "batter_suppression": batter.data["suppression"],
            "batter_unthwackability": batter.data["unthwackability"],
            "batter_base_thirst": batter.data["baseThirst"],
            "batter_continuation": batter.data["continuation"],
            "batter_ground_friction": batter.data["groundFriction"],
            "batter_indulgence": batter.data["indulgence"],
            "batter_laserlikeness": batter.data["laserlikeness"],
            "batter_anticapitalism": batter.data["anticapitalism"],
            "batter_chasiness": batter.data["chasiness"],
            "batter_omniscience": batter.data["omniscience"],
            "batter_tenaciousness": batter.data["tenaciousness"],
            "batter_watchfulness": batter.data["watchfulness"],
            "batter_pressurization": batter.data["pressurization"],
            "batter_cinnamon": batter.data.get("cinnamon", 0),
            "batter_multiplier": batter_multiplier,
            "runner_on_first_base_thirst": runner_on_first.data["baseThirst"] if runner_on_first is not None else 0,
            "runner_on_first_continuation": runner_on_first.data["continuation"] if runner_on_first is not None else 0,
            "runner_on_first_ground_friction": runner_on_first.data["groundFriction"] if runner_on_first is not None else 0,
            "runner_on_first_indulgence": runner_on_first.data["indulgence"] if runner_on_first is not None else 0,
            "runner_on_first_laserlikeness": runner_on_first.data["laserlikeness"] if runner_on_first is not None else 0,
            "runner_on_first_multiplier": runner_on_first_multiplier,
            "runner_on_second_base_thirst": runner_on_second.data["baseThirst"] if runner_on_second is not None else 0,
            "runner_on_second_continuation": runner_on_second.data["continuation"] if runner_on_second is not None else 0,
            "runner_on_second_ground_friction": runner_on_second.data["groundFriction"] if runner_on_second is not None else 0,
            "runner_on_second_indulgence": runner_on_second.data["indulgence"] if runner_on_second is not None else 0,
            "runner_on_second_laserlikeness": runner_on_second.data["laserlikeness"] if runner_on_second is not None else 0,
            "runner_on_second_multiplier": runner_on_second_multiplier,
            "runner_on_third_base_thirst": runner_on_third.data["baseThirst"] if runner_on_third is not None else 0,
            "runner_on_third_continuation": runner_on_third.data["continuation"] if runner_on_third is not None else 0,
            "runner_on_third_ground_friction": runner_on_third.data["groundFriction"] if runner_on_third is not None else 0,
            "runner_on_third_indulgence": runner_on_third.data["indulgence"] if runner_on_third is not None else 0,
            "runner_on_third_laserlikeness": runner_on_third.data["laserlikeness"] if runner_on_third is not None else 0,
            "runner_on_third_multiplier": runner_on_third_multiplier,
            "runner_on_third_hh_base_thirst": runner_on_third_hh.data["baseThirst"] if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_continuation": runner_on_third_hh.data["continuation"] if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_ground_friction": runner_on_third_hh.data["groundFriction"] if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_indulgence": runner_on_third_hh.data["indulgence"] if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_laserlikeness": runner_on_third_hh.data["laserlikeness"] if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_multiplier": runner_on_third_hh_multiplier,
            "pitcher_buoyancy": pitcher.data["buoyancy"],
            "pitcher_divinity": pitcher.data["divinity"],
            "pitcher_martyrdom": pitcher.data["martyrdom"],
            "pitcher_moxie": pitcher.data["moxie"],
            "pitcher_musclitude": pitcher.data["musclitude"],
            "pitcher_patheticism": pitcher.data["patheticism"],
            "pitcher_thwackability": pitcher.data["thwackability"],
            "pitcher_tragicness": pitcher.data["tragicness"],
            "pitcher_ruthlessness": pitcher.data["ruthlessness"],
            "pitcher_overpowerment": pitcher.data["overpowerment"],
            "pitcher_unthwackability": pitcher.data["unthwackability"],
            "pitcher_shakespearianism": pitcher.data["shakespearianism"],
            "pitcher_suppression": pitcher.data["suppression"],
            "pitcher_coldness": pitcher.data["coldness"],
            "pitcher_base_thirst": pitcher.data["baseThirst"],
            "pitcher_continuation": pitcher.data["continuation"],
            "pitcher_ground_friction": pitcher.data["groundFriction"],
            "pitcher_indulgence": pitcher.data["indulgence"],
            "pitcher_laserlikeness": pitcher.data["laserlikeness"],
            "pitcher_anticapitalism": pitcher.data["anticapitalism"],
            "pitcher_chasiness": pitcher.data["chasiness"],
            "pitcher_omniscience": pitcher.data["omniscience"],
            "pitcher_tenaciousness": pitcher.data["tenaciousness"],
            "pitcher_watchfulness": pitcher.data["watchfulness"],
            "pitcher_pressurization": pitcher.data["pressurization"],
            "pitcher_cinnamon": pitcher.data["cinnamon"],
            "pitcher_multiplier": pitcher_multiplier,
            "fielder_anticapitalism": fielder.data["anticapitalism"] if fielder is not None else 0,
            "fielder_chasiness": fielder.data["chasiness"] if fielder is not None else 0,
            "fielder_omniscience": fielder.data["omniscience"] if fielder is not None else 0,
            "fielder_tenaciousness": fielder.data["tenaciousness"] if fielder is not None else 0,
            "fielder_watchfulness": fielder.data["watchfulness"] if fielder is not None else 0,
            "fielder_multiplier": fielder_multiplier,
            "ballpark_grandiosity": stadium.data["grandiosity"],
            "ballpark_fortification": stadium.data["fortification"],
            "ballpark_obtuseness": stadium.data["obtuseness"],
            "ballpark_ominousness": stadium.data["ominousness"],
            "ballpark_inconvenience": stadium.data["inconvenience"],
            "ballpark_viscosity": stadium.data["viscosity"],
            "ballpark_forwardness": stadium.data["forwardness"],
            "ballpark_mysticism": stadium.data["mysticism"],
            "ballpark_elongation": stadium.data["elongation"],
            "ballpark_filthiness": stadium.data["filthiness"],
            "what1": what1,
            "what2": what2,
            "batting_team_hype": stadium.data["hype"] if not update["topOfInning"] else 0,
            "pitching_team_hype": stadium.data["hype"] if update["topOfInning"] else 0,
            "batter_name": batter.data["name"],
            "pitcher_name": pitcher.data["name"],
            "fielder_name": fielder.data["name"] if fielder is not None else "",
            "runner_on_first_name": runner_on_first.data["name"] if runner_on_first is not None else "",
            "runner_on_second_name": runner_on_second.data["name"] if runner_on_second is not None else "",
            "runner_on_third_name": runner_on_third.data["name"] if runner_on_third is not None else "",
            "runner_on_third_hh_name": runner_on_third_hh.data["name"] if runner_on_third_hh is not None else "",
            "batter_vibes": calculate_vibes(batter.data, update["day"]),
            "pitcher_vibes": calculate_vibes(pitcher.data, update["day"]),
            "fielder_vibes": calculate_vibes(fielder.data, update["day"]) if fielder is not None else 0,
            "runner_on_first_vibes": calculate_vibes(runner_on_first.data, update["day"]) if runner_on_first is not None else 0,
            "runner_on_second_vibes": calculate_vibes(runner_on_second.data, update["day"]) if runner_on_second is not None else 0,
            "runner_on_third_vibes": calculate_vibes(runner_on_third.data, update["day"]) if runner_on_third is not None else 0,
            "runner_on_third_hh_vibes": calculate_vibes(runner_on_third_hh.data, update["day"]) if runner_on_third_hh is not None else 0,
            "batter_mods": ";".join(batter.mods),
            "batting_team_mods": ";".join(batting_team.mods),
            "pitcher_mods": ";".join(pitcher.mods),
            "pitching_team_mods": ";".join(pitching_team.mods),
            "fielder_mods": ";".join(fielder.mods) if fielder is not None else "",
            "runner_on_first_mods": ";".join(runner_on_first.mods) if runner_on_first is not None else "",
            "runner_on_second_mods": ";".join(runner_on_second.mods) if runner_on_second is not None else "",
            "runner_on_third_mods": ";".join(runner_on_third.mods) if runner_on_third is not None else "",
            "runner_on_third_hh_mods": ";".join(runner_on_third_hh.mods) if runner_on_third_hh is not None else "",
            "game_id": update["id"],
            "stadium_id": update["stadiumId"],
            "play_count": update["playCount"],
            "weather": update["weather"],
            "ball_count": update["atBatBalls"],
            "strike_count": update["atBatStrikes"],
            "out_count": update["halfInningOuts"],
            "season": update["season"],
            "day": update["day"],
            "top_of_inning": update["topOfInning"],
            "home_score": update["homeScore"],
            "away_score": update["awayScore"],
            "inning": update["inning"],
            "batting_team_roster_size": len(batting_team.data["lineup"]) + len(batting_team.data["rotation"]),
            "pitching_team_roster_size": len(pitching_team.data["lineup"]) + len(pitching_team.data["rotation"]),
            "baserunner_count": update["baserunnerCount"],
            "baserunners": str(update["basesOccupied"]),
            "baserunners_next": str(baserunners_next),
            "is_strike": is_strike,
            "strike_roll": strike_roll,
            "strike_threshold": strike_threshold,
            "fielder_roll": fielder_roll,
            "batter_consecutive_hits": batter.data["consecutiveHits"],
            "team_level": attacked_team.data["level"] if (attacked_team and "level" in attacked_team.data) else None,
            "team_eDensity": attacked_team.data["eDensity"] if (attacked_team and "level" in attacked_team.data) else None,
            "team_name": attacked_team.data["nickname"] if (attacked_team and "level" in attacked_team.data) else None,
        }
        # fmt: on

        if self.csv is None:
            self.csv = DictWriter(self.file, fieldnames=list(row.keys()))
            self.csv.writeheader()

        self.csv.writerow(row)

    def close(self):
        self.file.close()
        self.file = None
        self.csv = None

        os.replace(self.partial_filename, self.final_filename)
