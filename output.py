import os
from csv import DictWriter


class SaveCsv:
    def __init__(self, run_name: str, category_name: str):
        self.final_filename = f"roll_data/{run_name}-{category_name}.csv"
        self.partial_filename = f"{self.final_filename}.partial"
        # Created when first row is written
        self.file = None
        self.csv = None

    def write(
        self,
        event_type: str,
        roll: float,
        passed: bool,
        batter,
        batting_team,
        pitcher,
        pitching_team,
        stadium,
        update,
        what1: float,
        what2: float,
        batter_multiplier: float,
        pitcher_multiplier: float,
        is_strike: bool,
        strike_roll: float,
        strike_threshold: float,
        fielder_roll,
        fielder,
        fielder_multiplier,
        runner,
        runner_multiplier,
        runner_on_first,
        runner_on_first_multiplier,
        runner_on_second,
        runner_on_second_multiplier,
        runner_on_third,
        runner_on_third_multiplier,
        runner_on_third_hh,
        runner_on_third_hh_multiplier,
        baserunners_next,
        attacked_team,
    ):
        # fmt: off
        row = {
            "event_type": event_type,
            "roll": roll,
            "passed": passed,
            "batter_buoyancy": batter.buoyancy,
            "batter_divinity": batter.divinity,
            "batter_martyrdom": batter.martyrdom,
            "batter_moxie": batter.moxie,
            "batter_musclitude": batter.musclitude,
            "batter_patheticism": batter.patheticism,
            "batter_thwackability": batter.thwackability,
            "batter_tragicness": batter.tragicness,
            "batter_coldness": batter.coldness,
            "batter_overpowerment": batter.overpowerment,
            "batter_ruthlessness": batter.ruthlessness,
            "batter_shakespearianism": batter.shakespearianism,
            "batter_suppression": batter.suppression,
            "batter_unthwackability": batter.unthwackability,
            "batter_base_thirst": batter.baseThirst,
            "batter_continuation": batter.continuation,
            "batter_ground_friction": batter.ground_friction,
            "batter_indulgence": batter.indulgence,
            "batter_laserlikeness": batter.laserlikeness,
            "batter_anticapitalism": batter.anticapitalism,
            "batter_chasiness": batter.chasiness,
            "batter_omniscience": batter.omniscience,
            "batter_tenaciousness": batter.tenaciousness,
            "batter_watchfulness": batter.watchfulness,
            "batter_pressurization": batter.pressurization,
            "batter_cinnamon": batter.cinnamon,
            "batter_multiplier": batter_multiplier,
            "runner_base_thirst": runner.baseThirst if runner is not None else 0,
            "runner_continuation": runner.continuation if runner is not None else 0,
            "runner_ground_friction": runner.ground_friction if runner is not None else 0,
            "runner_indulgence": runner.indulgence if runner is not None else 0,
            "runner_laserlikeness": runner.laserlikeness if runner is not None else 0,
            "runner_multiplier": runner_multiplier,
            "runner_on_first_base_thirst": runner_on_first.baseThirst if runner_on_first is not None else 0,
            "runner_on_first_continuation": runner_on_first.continuation if runner_on_first is not None else 0,
            "runner_on_first_ground_friction": runner_on_first.ground_friction if runner_on_first is not None else 0,
            "runner_on_first_indulgence": runner_on_first.indulgence if runner_on_first is not None else 0,
            "runner_on_first_laserlikeness": runner_on_first.laserlikeness if runner_on_first is not None else 0,
            "runner_on_first_multiplier": runner_on_first_multiplier,
            "runner_on_second_base_thirst": runner_on_second.baseThirst if runner_on_second is not None else 0,
            "runner_on_second_continuation": runner_on_second.continuation if runner_on_second is not None else 0,
            "runner_on_second_ground_friction": runner_on_second.ground_friction if runner_on_second is not None else 0,
            "runner_on_second_indulgence": runner_on_second.indulgence if runner_on_second is not None else 0,
            "runner_on_second_laserlikeness": runner_on_second.laserlikeness if runner_on_second is not None else 0,
            "runner_on_second_multiplier": runner_on_second_multiplier,
            "runner_on_third_base_thirst": runner_on_third.baseThirst if runner_on_third is not None else 0,
            "runner_on_third_continuation": runner_on_third.continuation if runner_on_third is not None else 0,
            "runner_on_third_ground_friction": runner_on_third.ground_friction if runner_on_third is not None else 0,
            "runner_on_third_indulgence": runner_on_third.indulgence if runner_on_third is not None else 0,
            "runner_on_third_laserlikeness": runner_on_third.laserlikeness if runner_on_third is not None else 0,
            "runner_on_third_multiplier": runner_on_third_multiplier,
            "runner_on_third_hh_base_thirst": runner_on_third_hh.baseThirst if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_continuation": runner_on_third_hh.continuation if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_ground_friction": runner_on_third_hh.ground_friction if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_indulgence": runner_on_third_hh.indulgence if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_laserlikeness": runner_on_third_hh.laserlikeness if runner_on_third_hh is not None else 0,
            "runner_on_third_hh_multiplier": runner_on_third_hh_multiplier,
            "pitcher_buoyancy": pitcher.buoyancy,
            "pitcher_divinity": pitcher.divinity,
            "pitcher_martyrdom": pitcher.martyrdom,
            "pitcher_moxie": pitcher.moxie,
            "pitcher_musclitude": pitcher.musclitude,
            "pitcher_patheticism": pitcher.patheticism,
            "pitcher_thwackability": pitcher.thwackability,
            "pitcher_tragicness": pitcher.tragicness,
            "pitcher_ruthlessness": pitcher.ruthlessness,
            "pitcher_overpowerment": pitcher.overpowerment,
            "pitcher_unthwackability": pitcher.unthwackability,
            "pitcher_shakespearianism": pitcher.shakespearianism,
            "pitcher_suppression": pitcher.suppression,
            "pitcher_coldness": pitcher.coldness,
            "pitcher_base_thirst": pitcher.baseThirst,
            "pitcher_continuation": pitcher.continuation,
            "pitcher_ground_friction": pitcher.ground_friction,
            "pitcher_indulgence": pitcher.indulgence,
            "pitcher_laserlikeness": pitcher.laserlikeness,
            "pitcher_anticapitalism": pitcher.anticapitalism,
            "pitcher_chasiness": pitcher.chasiness,
            "pitcher_omniscience": pitcher.omniscience,
            "pitcher_tenaciousness": pitcher.tenaciousness,
            "pitcher_watchfulness": pitcher.watchfulness,
            "pitcher_pressurization": pitcher.pressurization,
            "pitcher_cinnamon": pitcher.cinnamon,
            "pitcher_multiplier": pitcher_multiplier,
            "fielder_anticapitalism": fielder.anticapitalism if fielder is not None else 0,
            "fielder_chasiness": fielder.chasiness if fielder is not None else 0,
            "fielder_omniscience": fielder.omniscience if fielder is not None else 0,
            "fielder_tenaciousness": fielder.tenaciousness if fielder is not None else 0,
            "fielder_watchfulness": fielder.watchfulness if fielder is not None else 0,
            "fielder_multiplier": fielder_multiplier,
            "ballpark_grandiosity": stadium.grandiosity,
            "ballpark_fortification": stadium.fortification,
            "ballpark_obtuseness": stadium.obtuseness,
            "ballpark_ominousness": stadium.ominousness,
            "ballpark_inconvenience": stadium.inconvenience,
            "ballpark_viscosity": stadium.viscosity,
            "ballpark_forwardness": stadium.forwardness,
            "ballpark_mysticism": stadium.mysticism,
            "ballpark_elongation": stadium.elongation,
            "ballpark_filthiness": stadium.filthiness,
            "what1": what1,
            "what2": what2,
            "batting_team_hype": stadium.hype if not update["topOfInning"] else 0,
            "pitching_team_hype": stadium.hype if update["topOfInning"] else 0,
            "batter_id": batter.id,
            "pitcher_id": pitcher.id,
            "fielder_id": fielder.id if fielder is not None else "",
            "runner_id": runner.id if runner is not None else "",
            "runner_on_first_id": runner_on_first.id if runner_on_first is not None else "",
            "runner_on_second_id": runner_on_second.id if runner_on_second is not None else "",
            "runner_on_third_id": runner_on_third.id if runner_on_third is not None else "",
            "runner_on_third_hh_id": runner_on_third_hh.id if runner_on_third_hh is not None else "",
            "batter_name": batter.name,
            "pitcher_name": pitcher.name,
            "fielder_name": fielder.name if fielder is not None else "",
            "runner_name": runner.name if runner is not None else "",
            "runner_on_first_name": runner_on_first.name if runner_on_first is not None else "",
            "runner_on_second_name": runner_on_second.name if runner_on_second is not None else "",
            "runner_on_third_name": runner_on_third.name if runner_on_third is not None else "",
            "runner_on_third_hh_name": runner_on_third_hh.name if runner_on_third_hh is not None else "",
            "batter_vibes": batter.raw_vibes(update["day"]),
            "pitcher_vibes": pitcher.raw_vibes(update["day"]),
            "fielder_vibes": fielder.raw_vibes(update["day"]) if fielder is not None else 0,
            "runner_vibes": runner.raw_vibes(update["day"]) if runner is not None else 0,
            "runner_on_first_vibes": runner_on_first.raw_vibes(update["day"]) if runner_on_first is not None else 0,
            "runner_on_second_vibes": runner_on_second.raw_vibes(update["day"]) if runner_on_second is not None else 0,
            "runner_on_third_vibes": runner_on_third.raw_vibes(update["day"]) if runner_on_third is not None else 0,
            "runner_on_third_hh_vibes": runner_on_third_hh.raw_vibes(update["day"]) if runner_on_third_hh is not None else 0,
            "batter_mods": ";".join(batter.mods),
            "batting_team_mods": ";".join(batting_team.mods),
            "pitcher_mods": ";".join(pitcher.mods),
            "pitching_team_mods": ";".join(pitching_team.mods),
            "fielder_mods": ";".join(fielder.mods) if fielder is not None else "",
            "runner_mods": ";".join(runner.mods) if runner is not None else "",
            "runner_on_first_mods": ";".join(runner_on_first.mods) if runner_on_first is not None else "",
            "runner_on_second_mods": ";".join(runner_on_second.mods) if runner_on_second is not None else "",
            "runner_on_third_mods": ";".join(runner_on_third.mods) if runner_on_third is not None else "",
            "runner_on_third_hh_mods": ";".join(runner_on_third_hh.mods) if runner_on_third_hh is not None else "",
            "game_id": update["id"],
            "stadium_id": update["stadiumId"],
            "play_count": update["playCount"],
            "weather": update["weather"],
            "ball_count": update["atBatBalls"],
            "strike_count": update["atBatStrikes"],
            "out_count": update["halfInningOuts"],
            "season": update["season"],
            "day": update["day"],
            "top_of_inning": update["topOfInning"],
            "home_score": update["homeScore"],
            "away_score": update["awayScore"],
            "inning": update["inning"],
            "batting_team_roster_size": len(batting_team.lineup) + len(batting_team.rotation),
            "pitching_team_roster_size": len(pitching_team.lineup) + len(pitching_team.rotation),
            "baserunner_count": update["baserunnerCount"],
            "baserunners": str(update["basesOccupied"]),
            "baserunners_next": str(baserunners_next),
            "is_strike": is_strike,
            "strike_roll": strike_roll,
            "strike_threshold": strike_threshold,
            "fielder_roll": fielder_roll,
            "batter_consecutive_hits": batter.data["consecutiveHits"],
            "team_level": attacked_team.data["level"] if (attacked_team and "level" in attacked_team.data) else None,
            "team_eDensity": attacked_team.data["eDensity"] if (attacked_team and "eDensity" in attacked_team.data) else None,
            "team_name": attacked_team.data["nickname"] if (attacked_team and "nickname" in attacked_team.data) else None,
        }
        # fmt: on

        if self.csv is None:
            self.file = open(self.partial_filename, "w", newline="", encoding="utf-8")
            self.csv = DictWriter(self.file, fieldnames=list(row.keys()), extrasaction="ignore")
            self.csv.writeheader()

        self.csv.writerow(row)

    def close(self):
        if not self.file:
            return
        self.file.close()
        self.file = None
        self.csv = None

        os.replace(self.partial_filename, self.final_filename)
